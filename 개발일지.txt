24.11.12.
  QR-order 개발 기획

24.11.13.
  사용자 UI 디자인
  사용자 UI 구현: 메인 페이지

24.11.14.
  사용자 UI 디자인 구현: 반응형 추가

24.11.15.
  기능 부여: 메인 페이지 링크 이동, 메뉴 종류 변경, 장바구니/주문하기

24.11.16.
  scroll 해결: 전체 페이지 높이에서 헤더 높이 제외, 백분율 x
  기능 부여: 직원 호출 - 클릭 스타일링, 개수 변경, 팝업 생성/삭제
  redux 수정: slice 파일 세분화

24.11.17.
  기능 부여: 주문내역, 계산서, 주문하기, 호출하기
  스타일링 보완: 모든 페이지 scroll 적용

24.11.18.
  - 페이지 로드 소요시간
    GET /visitor/pickUpList 200 in 871ms
    GET /visitor/orderList 200 in 913ms
    GET /visitor/bill 200 in 634ms
    GET /visitor/call 200 in 946ms
    : 초기 접속만 3자리수 이후 접속은 2자리수, dev일 때만 그런 건지
  - 상태관리
    1. 직원호출(callState), 해당 페이지 접속할 때 상태 초기화
    2. 숫자(countNumberState), 페이지 이동 간 유지됨
    3. 주문(pickUpState), 선택한 주문 항목/에러 메시지 페이지 이동 간 유지됨
  - 필요 모달창, 언어 선택 UI 구현
  - framer, 언어 선택/메뉴항목 애니메이션 적용
  - 서버 api fetch 구현 사전준비
  - framer 문서 작성

24.11.19.
  - framer 애니메이션 적용: 메뉴 카테고리/주문완료/요청/모달창 
  - 문제: history 스택 많음-결제 완료 후 접근됨, 카테고리 페이지 첫 로드 오래 걸림
  - framer 문서 작성

24.11.20.
  - 기능 변경: 장바구니 -> 담기/빼기
  - 기능 추가 요청: 
    1. 스크롤 이벤트로 categoryTitle nav 이동하기, categoryTitle 눌렀을 때 해당 높이로 이동
    2. 이미지 모달창 생성하기: 원산지, 메뉴 정보 추가
  - 계산서 레이아웃 변경: 수량 x 원 금액, 수량 늘려도 레이아웃 유지
  - 스타일링 수정: 파란색 하이라이트 박스 제거, 최하단 메뉴 선택 시 스크롤 추가 공간 생성, 사용자 뷰포트 하단에 버튼 생성 
  - 뒤로가기 방지: <Link>, replace 속성으로 주문/요청 페이지 적용 
  - 오류: 초기 로드 때 category 하나만 잠시 존재, category 변경 시 이미지 변경 느림
    -> 클라이언트 사이드 렌더링 원인 예상, 목 데이터를 API로 받으면 해결 가능성 높음

24.11.21.
  - firebase 연결: 서버 생성 아닌 db 직접 연결
  - reactQuery 적용: 클라이언트 컴포넌트에서 fetch 사용 복잡으로 비동기 상태 처리 라이브러리 적용, 직원호출/메뉴 데이터 불러오기 적용
  - motion 보완: useQuery 데이터 생성 되었을 때 애니메이션 적용 수정
  - 코드 정리: 변수/가져온 파일 순서 통일, 사용하지 않는 redux 액션 제거  
  - 메인 페이지 로딩 애니메이션 적용
  ReactQuery: https://tanstack.com/query/latest/docs/framework/react/overview

24.11.22.
  - db: 고객-읽기(주문 목록만 생성 허용), 관리자-CURD
    -> db 규칙 생성
  - 주문목록 전송 db 연동: 사용자 이전 주문목록 확인 localStorage 활용, 데이터 서버 전송할 때는 localStorage 사용 안함
  - 주문, 요청 알림 전달 계획 구상: supabase Realtime으로 적용, firebase messaging 유료
    -> 추후 db도 supabase로 변경
  - Error, ReferenceError: localStorage is not defined
    -> next build 페이지 생성 할 때 발생, SSR 진행 하면서 오류 발생 
      typeof window === 'undefined' 조건 설정으로 해결 가능, 'use client' 선언해도 발생함
  - Error, Favicon 변경되지 않음
    -> 브라우저 캐시 보관 원인, 빈 캐시 및 하드 새로고침으로 해결 가능
    app 디렉터리 최상단에 .ico 파일 위치시키면 자동적으로 파비콘으로 인식됨, metadata 할당 필요 x
  - framer 애니메이션 적용: 메뉴 페이지 팝업 부드럽게 등장/퇴장
  - 관리자 UI 디자인: 메뉴, 테이블

24.12.18.
  - DB 변환
    : firebase -> supabase
    => select 구현 완료, insert 구현 대기 (allOrderList에 주문목록 삽입하면 sql 문으로 qr-order-table-list 테이블에 자동으로 삽입되도록 설정)
  - tableNum 얻는 방법 구상
    : qr 코드로 접속, pathName에서 추출, tableNum 전역으로 상태관리 + 이외 접근방식 제한하기

24.12.19.
  - 주문목록 DB insert/update 구상
    1. qr-order-allOrderList Table 
      : orderList, tableNum(고정) 필수, tableNum/orderNum/tableId 불필요
        - tableNum 전역 상태 관리: pathName에서 받아옴
        - orderList 하나의 주문 전달
    2. qr-order-table-list
      : allOrderList에서 행 삽입되면 tableId와 동일한 id의 행 속성 order에 orderList 배열 요소 추가
      => sql trigger 적용
  - 요청목록 DB insert 구상
    1. qr-order-request-list Table
      : requestList, tableNum 필수
        - requestList: text 유형, 배열을 문구로 가공하여 문자로 전달, fulfilled 되면 모달 닫음, rejected 되면 에러 출력
  - DB 변환
    : DB firebase -> supabase
    => insert 구현 완료, sql trigger 적용 
  - 코드 변수명, DB 속성 일치화

24.12.20.
  - DB 사진 불러오기 구상
    : 개별 메뉴 메타 데이터의 uri를 사용, sql trigger 적용, 파일명은 메뉴 아이디 붙여서, 관리자 측에서 설정
    링크 예시) https://[project_id].supabase.co/storage/v1/object/public/[bucket]/[asset-name]

    - 생성: storage에 이미지 저장, 생성된 uri를 해당 메뉴가 있는 DB에 삽입
    - 갱신: storage 이미지 변경, uri는 그대로, 파일명 중복 가능하지 않으면 uri 변경하여 삽입
    - 삭제: storage 이미지 삭제, 해당 메뉴 있는 DB에서 uri 삭제, 관리자에서 삭제 기능 없음 
  - Next.config.mjs images remotePatterns 설정

24.12.23.
  - 테이블 고유 링크 이동 설정
  - 웹 성능 최적화 진행
    : useQuery -> SSR 적용, img png -> webp 변환

24.12.24.
  - 웹 성능 최적화 진행
    : useQuery SSR/CSR 적용
  - 이전/이후 코드 성능 내용 추출 "GET"
    : 네트워크 3G 로드 시간 측정

24.12.25.
  - 컴포넌트 분할
  - 요청 횟수 제한: category, pickUp
  - 렌더링 최적화: initialClientPage

24.12.26.
  - 팝업 주문 타입 변경 오류 수정
  - 주문/요청 개수 코드 개선
  - 렌더링 최적화 / 코드 분할
    : 개수 증감은 객체 배열에서 특정 항목의 개수를 변경, 다른 항목이 변하지 않더라도 새로운 상태로 반환됨, 전체 렌더링 원인
  - bundle analyzer 검사
    : ANALYZE=true npm run build 실행 오류 => npx cross-env ANALYZE=true npm run build

24.12.27.
  - swiper 자체 구현
    : overflow-x 적용, category min/max-width 적용, onDrag 이벤트
  - MenuCategory 렌더링: useSelector 원인, 전부 렌더링 됨 

24.12.28.
  - MenuCategory 스크롤 최적화: 함수화, onDrag 연산 지연 적용, 자체 throttle 적용 
  - MenuCategory 리렌더링 적용: 리렌더링보다 dispatch 연산 최소화, useSelector 리렌더링 원인(필요이유: dispatch 요청 제한)  
  - 메뉴주문 처리과정 motion 오류 수정: AnimatePresence으로 조건부 컴포넌트 렌더링 적용 시 애니메이션 동작 연계 안 됨, 2개의 조건 컴포넌트(completed, noCompleted) ProcessOrder로 통합
  - LanguageButton, AlertModal, PopUp 동적 가져오기 적용: main에서 chuncks 번들로 분리

  - 트리세이킹 알아보기
    -> Nextjs 트리세이킹
      : Next.js Compiler 
        - SWC 기반 번들 채택 중
          : ESM/commonJS 둘 다 적용, JS/TS 컴파일/번들링 중점
          https://nextjs.org/docs/architecture/nextjs-compiler          

          * 채택하지 않지만 또 다른 번들러, Webpack tree shaking
            : ES2015 정적구조 의존, webpack은 정적 모듈 번들러(파일 효율적으로 결합/관리)
            https://webpack.js.org/guides/tree-shaking/#root

  - dynamic import 알아보기
    : 동적 가져오기는 해당 코드(컴포넌트)를 청크 파일(필요할 때 가져오는 동적 코드 모음 파일)로 분류, 페이지 라우터 적용 X(이미 청크 파일로 라우터 분리되어 있음)
    조건부 렌더링 할 때 네트워크 창에서 dynamic 미/적용은 동일한 결과로 보이지만 빌드 할 때는 main이 아닌 chuncks 번들로 분리되는 차이가 있음  
      => languageButton, AlertModal 같은 조건부 렌더링 컴포넌트 dynamic 적용 
      https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading


24.12.29.
  - throttle 알아보기
    : 일정시간 간격으로 요청 처리
  - debounce 알아보기
    : 일정시간 내 반복 요청 중에서 마지막 요청 실행

  - resize 이벤트 최적화: debounce 적용
  - motion 번들 최소화
    : m 사용, 초기 로드 번들을 최소화, 사전 로드 제한(initial={false}), 
    LazyMotion으로 해결 가능, 동적 가져오기로 번들 용량 최소화, 로드 시점 차이(초기 로드 -> 필요할 때)
    https://motion.dev/docs/react-reduce-bundle-size
  - motion 번들 최소화 롤백
    : 이전 bundle 비교, 페이지 라우터 용량은 1kb 이하 감소, 메인 페이지 라우터 용량 12.79kb 증가, 
    motion -> m 변환으로 필요한 기능만 로드, LazyMotion 코드 작성으로 초기 로드 페이지 용량 증가 

24.12.30.
  - 애니메이션 오류 수정: 메뉴 담기/빼기 아이콘
  - 로드 시간 측정

24.12.31.
  - 빌드 오류 해결: css 폴더명 소문자 오류

25.1.16.
  - README 작성
  
25.1.17.
  - throttle 측정
    : 개발 전용 코드 작성

<--- img 없어도 사진 크기 유지, 이미지 로드 한번에 되도록, 로드 UI 삽입, 로딩 너무 느림 --->